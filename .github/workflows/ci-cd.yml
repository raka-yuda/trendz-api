name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  PROJECT_NAME: trendz-api

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep 'tag_name' | cut -d\" -f4)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Create .env file
        run: |
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_HOSTNAME=${{ secrets.DB_HOSTNAME }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          
      - name: Validate Docker Compose configuration
        run: docker-compose config

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Build Docker Images
        run: |
          docker-compose -p $PROJECT_NAME build --no-cache

      - name: Push Docker Images to GitHub Container Registry
        run: |
          docker tag trendz-api:latest ghcr.io/${{ github.repository }}:latest
          docker push ghcr.io/${{ github.repository }}:latest

      - name: Deploy to Production Server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_HOSTNAME: ${{ secrets.DB_HOSTNAME }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          # echo "DB_NAME=$DB_NAME" >> .env
          # echo "DB_HOSTNAME=$DB_HOSTNAME" >> .env
          # echo "DB_USERNAME=$DB_USERNAME" >> .env
          # echo "DB_PASSWORD=$DB_PASSWORD" >> .env
          echo "$SSH_PRIVATE_KEY" > trendz-api-key
          chmod 600 trendz-api-key
          scp -i trendz-api-key -o StrictHostKeyChecking=no .env $SSH_USER@$SSH_HOST:/opt/trendz-api/app/.env
          # ssh -i trendz-api-key -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "cd /opt/trendz-api/app && docker-compose pull && docker-compose -p trendz-api up --build -d"
          ssh -i trendz-api-key -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << EOF
            PROJECT_NAME="trendz-api"
            cd /opt/trendz-api/app
            
            echo "Pruning unused Docker resources for ${PROJECT_NAME}"
            docker container prune -f --filter "label=com.docker.compose.project=$PROJECT_NAME"
            docker network prune -f --filter "label=com.docker.compose.project=$PROJECT_NAME"

            docker-compose pull

            echo "Starting Docker containers"
            docker-compose -p $PROJECT_NAME up -d

            echo "Cleaning up old Docker images for ${PROJECT_NAME}"
            docker image prune -f --filter "label=com.docker.compose.project=$PROJECT_NAME"

            echo "Reloading Nginx configuration for ${PROJECT_NAME}"
            sudo nginx -t && sudo nginx -s reload
            echo "Deployment completed"
          EOF
          rm trendz-api-key

